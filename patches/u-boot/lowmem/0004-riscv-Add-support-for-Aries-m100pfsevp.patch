From 017c4222e659f5550e03d02b2e2cd2948428e2de Mon Sep 17 00:00:00 2001
From: Conor Dooley <conor.dooley@microchip.com>
Date: Tue, 10 May 2022 15:00:12 +0100
Subject: [PATCH 4/7] riscv: Add support for Aries m100pfsevp

Add initial support for the PolarFire SoC based Aries Embedded
m100pfsevp.

Signed-off-by: Conor Dooley <conor.dooley@microchip.com>
---
 arch/riscv/Kconfig                  |   4 +
 board/aries/m100pfsevp/Kconfig      |  49 +++++
 board/aries/m100pfsevp/MAINTAINERS  |   6 +
 board/aries/m100pfsevp/Makefile     |   7 +
 board/aries/m100pfsevp/m100pfsevp.c | 313 ++++++++++++++++++++++++++++
 configs/m100pfsevp_defconfig        |  20 ++
 include/configs/m100pfsevp.h        |  77 +++++++
 7 files changed, 476 insertions(+)
 create mode 100644 board/aries/m100pfsevp/Kconfig
 create mode 100644 board/aries/m100pfsevp/MAINTAINERS
 create mode 100644 board/aries/m100pfsevp/Makefile
 create mode 100644 board/aries/m100pfsevp/m100pfsevp.c
 create mode 100644 configs/m100pfsevp_defconfig
 create mode 100644 include/configs/m100pfsevp.h

diff --git a/arch/riscv/Kconfig b/arch/riscv/Kconfig
index ba29e70acf..997e1e22ab 100644
--- a/arch/riscv/Kconfig
+++ b/arch/riscv/Kconfig
@@ -8,6 +8,9 @@ choice
 	prompt "Target select"
 	optional
 
+config TARGET_ARIES_M100PFSEVP
+	bool "Support Aries M100PFSEVP PolarFire SoC-FPGA Platform"
+
 config TARGET_AX25_AE350
 	bool "Support ax25-ae350"
 
@@ -59,6 +62,7 @@ config SPL_SYS_DCACHE_OFF
 
 # board-specific options below
 source "board/AndesTech/ax25-ae350/Kconfig"
+source "board/aries/m100pfsevp/Kconfig"
 source "board/emulation/qemu-riscv/Kconfig"
 source "board/microchip/mpfs_icicle/Kconfig"
 source "board/sifive/unleashed/Kconfig"
diff --git a/board/aries/m100pfsevp/Kconfig b/board/aries/m100pfsevp/Kconfig
new file mode 100644
index 0000000000..7a6c23eaf0
--- /dev/null
+++ b/board/aries/m100pfsevp/Kconfig
@@ -0,0 +1,49 @@
+if TARGET_ARIES_M100PFSEVP
+
+config SYS_BOARD
+	default "m100pfsevp"
+
+config SYS_VENDOR
+	default "aries"
+
+config SYS_CPU
+	default "generic"
+
+config SYS_CONFIG_NAME
+	default "m100pfsevp"
+
+config SYS_TEXT_BASE
+	default 0x80000000 if !RISCV_SMODE
+	default 0x80200000 if RISCV_SMODE
+
+config BOARD_SPECIFIC_OPTIONS # dummy
+	def_bool y
+	select GENERIC_RISCV
+	select BOARD_EARLY_INIT_F
+	select BOARD_LATE_INIT
+	imply SMP
+	imply CLK_CCF
+	imply CLK_MPFS
+	imply SYS_NS16550
+	imply CMD_DHCP
+	imply CMD_EXT2
+	imply CMD_EXT4
+	imply CMD_FAT
+	imply CMD_FS_GENERIC
+	imply CMD_NET
+	imply CMD_PING
+	imply CMD_MMC
+	imply DOS_PARTITION
+	imply EFI_PARTITION
+	imply IP_DYN
+	imply ISO_PARTITION
+	imply MACB
+	imply MII
+	imply PHY_LIB
+	imply PHY_VITESSE
+	imply MMC
+	imply MMC_WRITE
+	imply MMC_SDHCI
+	imply MMC_SDHCI_CADENCE
+
+endif
diff --git a/board/aries/m100pfsevp/MAINTAINERS b/board/aries/m100pfsevp/MAINTAINERS
new file mode 100644
index 0000000000..35a83f0685
--- /dev/null
+++ b/board/aries/m100pfsevp/MAINTAINERS
@@ -0,0 +1,6 @@
+Aries M100PFSEVP Board
+M:	Wolfgang Grandegger <wg@aries-embedded.de>
+S:	Maintained
+F:	board/aries/m100pfsevp/
+F:	include/configs/m100pfsevp.h
+F:	configs/m100pfsevp_defconfig
diff --git a/board/aries/m100pfsevp/Makefile b/board/aries/m100pfsevp/Makefile
new file mode 100644
index 0000000000..4926fa11a6
--- /dev/null
+++ b/board/aries/m100pfsevp/Makefile
@@ -0,0 +1,7 @@
+# SPDX-License-Identifier: GPL-2.0+
+#
+# Copyright (C) 2019 Microchip Technology Inc.
+# Padmarao Begari <padmarao.begari@microchip.com>
+#
+
+obj-y	+= m100pfsevp.o
diff --git a/board/aries/m100pfsevp/m100pfsevp.c b/board/aries/m100pfsevp/m100pfsevp.c
new file mode 100644
index 0000000000..10bd9a7e87
--- /dev/null
+++ b/board/aries/m100pfsevp/m100pfsevp.c
@@ -0,0 +1,313 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright (C) 2019 Microchip Technology Inc.
+ * Padmarao Begari <padmarao.begari@microchip.com>
+ */
+
+#include <common.h>
+#include <command.h>
+#include <dm.h>
+#include <env.h>
+#include <init.h>
+#include <mmc.h>
+#include <dm/device-internal.h>
+#include <dm/lists.h>
+#include <asm/io.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define MPFS_SYSREG_SOFT_RESET		((unsigned int *)0x20002088)
+#define MPFS_SYS_SERVICE_CR		((unsigned int *)0x37020050)
+#define MPFS_SYS_SERVICE_SR		((unsigned int *)0x37020054)
+#define MPFS_SYS_SERVICE_MAILBOX	((unsigned char *)0x37020800)
+
+#define GPIO_IOBANK0_LO_GPOUT		((unsigned char *)0x20120088)
+#define GPIO_IOBANK0_LO_CLEAR_BITS	((unsigned char *)0x201200a0)
+#define GPIO_IOBANK0_LO_SET_BITS	((unsigned char *)0x201200a4)
+#define GPIO_IOBANK0_SD_SEL_MASK	0x1000 /* bit #12 selects the SD card */
+
+#define MPFS_MMC_DRIVER_PATH		"/soc/mmc@20008000"
+#define MPFS_MMC_DRIVER_NAME		"sdhci-cdns"
+#define MPFS_MMC_DEV_NUM		0
+
+#define PERIPH_RESET_VALUE		0x1e8u
+#define SERVICE_CR_REQ			0x1u
+#define SERVICE_SR_BUSY			0x2u
+
+static void read_device_serial_number(u8 *response, u8 response_size)
+{
+	u8 idx;
+	u8 *response_buf;
+	unsigned int val;
+
+	response_buf = (u8 *)response;
+
+	writel(SERVICE_CR_REQ, MPFS_SYS_SERVICE_CR);
+	/*
+	 * REQ bit will remain set till the system controller starts
+	 * processing.
+	 */
+	do {
+		val = readl(MPFS_SYS_SERVICE_CR);
+	} while (SERVICE_CR_REQ == (val & SERVICE_CR_REQ));
+
+	/*
+	 * Once system controller starts processing the busy bit will
+	 * go high and service is completed when busy bit is gone low
+	 */
+	do {
+		val = readl(MPFS_SYS_SERVICE_SR);
+	} while (SERVICE_SR_BUSY == (val & SERVICE_SR_BUSY));
+
+	for (idx = 0; idx < response_size; idx++)
+		response_buf[idx] = readb(MPFS_SYS_SERVICE_MAILBOX + idx);
+}
+
+int board_init(void)
+{
+	/* For now nothing to do here. */
+
+	return 0;
+}
+
+int board_early_init_f(void)
+{
+	unsigned int val;
+
+	/* Reset uart, mmc peripheral */
+	val = readl(MPFS_SYSREG_SOFT_RESET);
+	val = (val & ~(PERIPH_RESET_VALUE));
+	writel(val, MPFS_SYSREG_SOFT_RESET);
+	return 0;
+}
+
+int board_late_init(void)
+{
+	u32 ret;
+	u32 node;
+	u8 idx;
+	u8 device_serial_number[16] = { 0 };
+	unsigned char mac_addr[6];
+	char icicle_mac_addr[20];
+	void *blob = (void *)gd->fdt_blob;
+
+	node = fdt_path_offset(blob, "ethernet0");
+	if (node < 0) {
+		printf("No ethernet0 path offset\n");
+		return -ENODEV;
+	}
+
+	ret = fdtdec_get_byte_array(blob, node, "local-mac-address", mac_addr, 6);
+	if (ret) {
+		printf("No local-mac-address property\n");
+		return -EINVAL;
+	}
+
+	read_device_serial_number(device_serial_number, 16);
+
+	/* Update MAC address with device serial number */
+	mac_addr[0] = 0xc0;
+	mac_addr[1] = 0xe5;
+	mac_addr[2] = 0x4e;
+	mac_addr[3] = device_serial_number[2];
+	mac_addr[4] = device_serial_number[1];
+	mac_addr[5] = device_serial_number[0];
+
+	ret = fdt_setprop(blob, node, "local-mac-address", mac_addr, 6);
+	if (ret) {
+		printf("Error setting local-mac-address property\n");
+		return -ENODEV;
+	}
+
+	icicle_mac_addr[0] = '[';
+
+	sprintf(&icicle_mac_addr[1], "%pM", mac_addr);
+
+	icicle_mac_addr[18] = ']';
+	icicle_mac_addr[19] = '\0';
+
+	for (idx = 0; idx < 20; idx++) {
+		if (icicle_mac_addr[idx] == ':')
+			icicle_mac_addr[idx] = ' ';
+	}
+	env_set("icicle_mac_addr0", icicle_mac_addr);
+
+	mac_addr[5] = device_serial_number[0] + 1;
+
+	icicle_mac_addr[0] = '[';
+
+	sprintf(&icicle_mac_addr[1], "%pM", mac_addr);
+
+	icicle_mac_addr[18] = ']';
+	icicle_mac_addr[19] = '\0';
+
+	for (idx = 0; idx < 20; idx++) {
+		if (icicle_mac_addr[idx] == ':')
+			icicle_mac_addr[idx] = ' ';
+	}
+	env_set("icicle_mac_addr1", icicle_mac_addr);
+
+	return 0;
+}
+
+/* code derived from cmd/bind.c */
+static int unbind_mmc_dev(void)
+{
+	const char *path = MPFS_MMC_DRIVER_PATH;
+	struct udevice *dev;
+	int ret;
+	ofnode ofnode;
+
+	ofnode = ofnode_path(path);
+	printf("%s: node=%ld\n", __func__, ofnode.of_offset);
+	if (!ofnode_valid(ofnode)) {
+		printf("%s is not a valid node path\n", path);
+		return -EINVAL;
+	}
+
+	ret = device_find_global_by_ofnode(ofnode, &dev);
+
+	if (!dev || ret) {
+		printf("Cannot find a device with path %s\n", path);
+		return -ENODEV;
+	}
+
+	ret = device_remove(dev, DM_REMOVE_NORMAL);
+	if (ret) {
+		printf("Unable to remove. err:%d\n", ret);
+		return ret;
+	}
+
+	ret = device_unbind(dev);
+	if (ret) {
+		printf("Unable to unbind. err:%d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int bind_and_init_mmc_dev(void)
+{
+	const char *path = MPFS_MMC_DRIVER_PATH;
+	const char *drv_name = MPFS_MMC_DRIVER_NAME;
+	struct udevice *dev;
+	struct udevice *parent = NULL;
+	int ret;
+	ofnode ofnode;
+	struct driver *drv;
+	drv = lists_driver_lookup_name(drv_name);
+	if (!drv) {
+		printf("%s is not a valid driver name\n", drv_name);
+		return -ENOENT;
+	}
+
+	ofnode = ofnode_path(path);
+	printf("%s: node=%ld\n", __func__, ofnode.of_offset);
+	if (!ofnode_valid(ofnode)) {
+		printf("%s is not a valid node path\n", path);
+		return -EINVAL;
+	}
+
+	while (ofnode_valid(ofnode)) {
+		if (!device_find_global_by_ofnode(ofnode, &parent))
+			break;
+		ofnode = ofnode_get_parent(ofnode);
+		printf("%s: parent=%ld\n", __func__, ofnode.of_offset);
+	}
+
+	if (!parent) {
+		printf("Cannot find a parent device for node path %s\n", path);
+		return -ENODEV;
+	}
+
+	ofnode = ofnode_path(path);
+	printf("%s: node=%ld\n", __func__, ofnode.of_offset);
+	ret = lists_bind_fdt(parent, ofnode, &dev, NULL, false);
+
+	if (!dev || ret) {
+		printf("Unable to bind. err:%d\n", ret);
+		return ret;
+	}
+
+	return mmc_init_device(MPFS_MMC_DEV_NUM);
+}
+
+static int fdt_mmc_fixup(int sd)
+{
+	void *blob = (void *)gd->fdt_blob;
+	u32 bus_width;
+	u32 node;
+	int ret;
+
+	node = fdt_path_offset(blob, MPFS_MMC_DRIVER_PATH);
+	if (node < 0) {
+		printf("No mmc path offset\n");
+		return -ENODEV;
+	}
+	printf("%s: node=%d\n", __func__, node);
+
+	bus_width = sd ? 4 : 8;
+	ret = fdt_setprop_u32(blob, node, "bus-width", bus_width);
+	if (ret) {
+		printf("Error setting bus-width property\n");
+		return -ENODEV;
+	}
+
+	return 0;
+}
+
+int do_selsd(struct cmd_tbl *cmdtp, int flag, int argc, char *const argv[])
+{
+	unsigned int val;
+	int sel = -1;
+	int ret;
+
+	val = readl(GPIO_IOBANK0_LO_GPOUT);
+        if (argc == 1) {
+		if (val & GPIO_IOBANK0_SD_SEL_MASK)
+			return 0;
+		else
+		return 1;
+        } else if (argc == 2) {
+		if (argv[1][0] == '0') {
+			if (val & GPIO_IOBANK0_SD_SEL_MASK)
+				sel = 0;
+		} else if (argv[1][0] == '1') {
+			if (!(val & GPIO_IOBANK0_SD_SEL_MASK))
+				sel = 1;
+		} else {
+			return CMD_RET_USAGE;
+		}
+		if (sel >= 0) {
+			ret = unbind_mmc_dev();
+			if (ret)
+				return CMD_RET_FAILURE;
+			if (sel) {
+				writel(GPIO_IOBANK0_SD_SEL_MASK,
+				       GPIO_IOBANK0_LO_SET_BITS);
+			} else {
+				writel(GPIO_IOBANK0_SD_SEL_MASK,
+				       GPIO_IOBANK0_LO_CLEAR_BITS);
+			}
+			ret = fdt_mmc_fixup(sel);
+			if (ret)
+				return CMD_RET_FAILURE;			
+			ret = bind_and_init_mmc_dev();
+			if (ret)
+				return CMD_RET_FAILURE;
+		}
+	} else {
+		return CMD_RET_USAGE;
+	}
+
+        return CMD_RET_SUCCESS;
+}
+
+U_BOOT_CMD(
+        selsd, CONFIG_SYS_MAXARGS, 1, do_selsd,
+        "Get or set the SD card as MMC device\n",
+        "selsd - returns 0 if the SD card or 1 if the eMMC is selected\n"
+        "selsd 1 - select the SD card\n"
+        "selsd 0 - select the eMMC\n"
+        );
diff --git a/configs/m100pfsevp_defconfig b/configs/m100pfsevp_defconfig
new file mode 100644
index 0000000000..9cac48553c
--- /dev/null
+++ b/configs/m100pfsevp_defconfig
@@ -0,0 +1,20 @@
+CONFIG_RISCV=y
+CONFIG_SYS_MALLOC_LEN=0x800000
+CONFIG_SYS_MALLOC_F_LEN=0x2000
+CONFIG_ENV_SIZE=0x2000
+CONFIG_ENV_OFFSET=0x4400
+CONFIG_DEFAULT_DEVICE_TREE="m100pfsevp"
+CONFIG_TARGET_ARIES_M100PFSEVP=y
+CONFIG_ARCH_RV64I=y
+CONFIG_RISCV_SMODE=y
+CONFIG_SBI_V01=y
+CONFIG_DISTRO_DEFAULTS=y
+CONFIG_SYS_LOAD_ADDR=0x80200000
+CONFIG_FIT=y
+CONFIG_DISPLAY_CPUINFO=y
+CONFIG_DISPLAY_BOARDINFO=y
+CONFIG_ENV_OVERWRITE=y
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_BOOTP_SEND_HOSTNAME=y
+CONFIG_DM_MTD=y
diff --git a/include/configs/m100pfsevp.h b/include/configs/m100pfsevp.h
new file mode 100644
index 0000000000..78447b2dcf
--- /dev/null
+++ b/include/configs/m100pfsevp.h
@@ -0,0 +1,77 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright (C) 2019 Microchip Technology Inc.
+ * Padmarao Begari <padmarao.begari@microchip.com>
+ */
+
+#ifndef __CONFIG_H
+#define __CONFIG_H
+
+#include <linux/sizes.h>
+
+#define CONFIG_SYS_SDRAM_BASE       0x80000000
+#define CONFIG_SYS_INIT_SP_ADDR     (CONFIG_SYS_SDRAM_BASE + SZ_2M)
+
+//#define CONFIG_SYS_LOAD_ADDR        (CONFIG_SYS_SDRAM_BASE + SZ_2M)
+
+//#define CONFIG_SYS_MALLOC_LEN       SZ_8M
+
+#define CONFIG_SYS_BOOTM_LEN        SZ_64M
+
+#define CONFIG_STANDALONE_LOAD_ADDR 0x80200000
+
+/* Environment options */
+
+#define BOOT_TARGET_DEVICES(func) \
+	func(MMC, mmc, 0) \
+	func(DHCP, dhcp, na)
+
+
+#include <config_distro_bootcmd.h>
+
+#undef CONFIG_BOOTCOMMAND
+#define CONFIG_BOOTCOMMAND "run mmc_mmc"
+
+#define CONFIG_EXTRA_ENV_SETTINGS	       \
+	"addcons=setenv bootargs ${bootargs} " \
+		"console=${consdev},${baudrate}\0" \
+	"addip=setenv bootargs ${bootargs} ip=${ipaddr}:${serverip}:" \
+		"${gatewayip}:${netmask}:${hostname}:${netdev}:off\0" \
+	"addmisc=setenv bootargs ${bootargs} ${miscargs}\0" \
+	"bootfile=fitImage\0" \
+	"consdev=ttyS1\0" \
+	"fdtextract=imxtract ${kernel_addr_r} " \
+		"fdt-${fdt_file} ${fdt_addr_r}\0" \
+	"fdtselect=if test ! -e aries_m100pfsevp-sdcard.dtb; then " \
+		"if selsd; then " \
+		"setenv fdt_file aries_m100pfsevp-sdcard.dtb; else " \
+		"setenv fdt_file aries_m100pfsevp-emmc.dtb; fi; fi\0" \
+	"hostname=m100pfsevp\0"	\
+	"miscargs=earlycon=sbi uio_pdrv_genirq.of_id=generic-uio " \
+		"pci-hpmemsize=0M libata.force=noncq\0" \
+	"mmc_mmc=run mmcload fdtselect " \
+		"mmcargs addcons addmisc; " \
+	"bootm start ${kernel_addr_r}#conf-${fdt_file}; bootm loados ${kernel_addr_r}; bootm ramdisk; bootm prep; bootm go; \0" \
+	"mmcargs=setenv bootargs root=${rootdev} rw rootwait\0" \
+	"mmcload=mmc rescan; " \
+		"load mmc 0:1 ${kernel_addr_r} ${bootfile}\0" \
+	"net_nfs=run netload fdtselect " \
+		"nfsargs addcons addip addmisc; " \
+		"bootm start ${kernel_addr_r}#conf-${fdt_file}; bootm loados ${kernel_addr_r}; bootm ramdisk; bootm prep; bootm go; \0" \
+	"netdev=eth0\0" \
+	"netload=tftp ${kernel_addr_r} ${hostname}/${bootfile}\0" \
+	"nfsargs=setenv bootargs root=/dev/nfs rw " \
+	"nfsroot=${serverip}:${rootpath},v3,tcp\0" \
+	"rootdev=/dev/mmcblk0p3\0" \
+	"rootpath=/tftpboot/m100pfsevp/rootfs\0" \
+	"devtype=mmc\0" \
+	"devnum=0\0" \
+	"bootm_size=0x10000000\0" \
+	"kernel_addr_r=0x84000000\0" \
+	"fdt_addr_r=0x88000000\0" \
+	"scriptaddr=0x88100000\0" \
+	"pxefile_addr_r=0x88200000\0" \
+	"ramdisk_addr_r=0x88300000\0" \
+	BOOTENV
+
+#endif /* __CONFIG_H */
-- 
2.36.1

